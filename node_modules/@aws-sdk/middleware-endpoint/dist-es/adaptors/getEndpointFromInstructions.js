import { __awaiter, __generator, __read, __values } from "tslib";
import { resolveParamsForS3 } from "../service-customizations";
export var getEndpointFromInstructions = function (commandInput, instructionsSupplier, clientConfig, context) { return __awaiter(void 0, void 0, void 0, function () {
    var endpointParams, endpoint;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, resolveParams(commandInput, instructionsSupplier, clientConfig)];
            case 1:
                endpointParams = _a.sent();
                if (typeof clientConfig.endpointProvider !== "function") {
                    throw new Error("config.endpointProvider is not set.");
                }
                endpoint = clientConfig.endpointProvider(endpointParams, context);
                return [2, endpoint];
        }
    });
}); };
export var resolveParams = function (commandInput, instructionsSupplier, clientConfig) { return __awaiter(void 0, void 0, void 0, function () {
    var endpointParams, instructions, _a, _b, _c, name_1, instruction, _d, _e, _f, e_1_1;
    var e_1, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                endpointParams = {};
                instructions = (instructionsSupplier.getEndpointParameterInstructions || (function () { return null; }))() || {};
                _h.label = 1;
            case 1:
                _h.trys.push([1, 10, 11, 12]);
                _a = __values(Object.entries(instructions)), _b = _a.next();
                _h.label = 2;
            case 2:
                if (!!_b.done) return [3, 9];
                _c = __read(_b.value, 2), name_1 = _c[0], instruction = _c[1];
                _d = instruction.type;
                switch (_d) {
                    case "staticContextParams": return [3, 3];
                    case "contextParams": return [3, 4];
                    case "clientContextParams": return [3, 5];
                    case "builtInParams": return [3, 5];
                }
                return [3, 7];
            case 3:
                endpointParams[name_1] = instruction.value;
                return [3, 8];
            case 4:
                endpointParams[name_1] = commandInput[instruction.name];
                return [3, 8];
            case 5:
                _e = endpointParams;
                _f = name_1;
                return [4, createConfigProvider(instruction.name, name_1, clientConfig)()];
            case 6:
                _e[_f] = _h.sent();
                return [3, 8];
            case 7: throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
            case 8:
                _b = _a.next();
                return [3, 2];
            case 9: return [3, 12];
            case 10:
                e_1_1 = _h.sent();
                e_1 = { error: e_1_1 };
                return [3, 12];
            case 11:
                try {
                    if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7];
            case 12:
                if (Object.keys(instructions).length === 0) {
                    Object.assign(endpointParams, clientConfig);
                }
                if (String(clientConfig.serviceId).toLowerCase() === "s3") {
                    resolveParamsForS3(endpointParams);
                }
                return [2, endpointParams];
        }
    });
}); };
var createConfigProvider = function (configKey, canonicalEndpointParamKey, config) {
    var configProvider = function () { return __awaiter(void 0, void 0, void 0, function () {
        var configValue;
        return __generator(this, function (_a) {
            configValue = config[configKey] || config[canonicalEndpointParamKey];
            if (typeof configValue === "function") {
                return [2, configValue()];
            }
            return [2, configValue];
        });
    }); };
    return configProvider;
};
